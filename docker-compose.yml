services:

  db-dev:
    image: postgres:16
    profiles: ["dev"]
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER_DEV}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_DEV}
      POSTGRES_DB: ${POSTGRES_DB_DEV}
    volumes:
      - db_channel_dev_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER_DEV} -d ${POSTGRES_DB_DEV}']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    ports:
      - "${POSTGRES_PORT_DEV:-5432}:5432"
    networks:
      - channel

  api-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    profiles: ["dev"]
    restart: unless-stopped
    command: yarn start:dev
    environment:
      NODE_ENV: development
      APP_PORT: ${APP_PORT:-3000}
      DATABASE_HOST: db-dev
      POSTGRES_DB: ${POSTGRES_DB_DEV}
      POSTGRES_USER: ${POSTGRES_USER_DEV}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_DEV}
      # POSTGRES_PORT: 5432
    volumes:
      - ./:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - "${HOST_PORT:-3000}:3000"
    depends_on:
      db-dev:
        condition: service_healthy
    networks:
      - channel
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================
  # SERVICIOS DE PRODUCCIÃ“N
  # ============================================
  db-prod:
    image: postgres:16
    profiles: ["prod", "db"]
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - db_channel_prod_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - channel
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  api-prod:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    profiles: ["prod", "mi"]
    restart: unless-stopped
    environment:
      NODE_ENV: production
      APP_PORT: ${APP_PORT:-3005}
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_NAME: ${POSTGRES_DB}
      DATABASE_USER: ${POSTGRES_USER}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      DATABASE_PORT: ${POSTGRES_PORT}
    expose:
      - "3000"
    # depends_on:
    #   db-prod:
    #     condition: service_healthy
    # healthcheck:
      # test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      # interval: 30s
      # timeout: 10s
      # retries: 3
      # start_period: 40s
    networks:
      - channel
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  nginx:
    image: nginx:alpine
    profiles: ["prod"]
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro      
    # depends_on:
    #   api-prod:
    #     condition: service_healthy
    networks:
      - channel
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    # healthcheck:
    #   test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3

volumes:
  db_channel_dev_data:
  db_channel_prod_data:

networks:
  channel:
    external: true